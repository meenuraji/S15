"""s15summary
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1CJEtXzXhRd7vXa7s1isepDAIz92g5NPf
"""

from torch.nn.modules.module import _addindent
import torchvision.models as models
from torchsummary import summary
from torch.utils.tensorboard import SummaryWriter
import torch
import numpy as np


def torch_summarize(model, show_weights=True, show_parameters=True):
  def __init__(self):
    """Summarizes torch model by showing trainable parameters and weights."""
    tmpstr = model.__class__.__name__ + ' (\n'
    for key, module in model._modules.items():
        # if it contains layers let call it recursively to get params and weights
        if type(module) in [
            torch.nn.modules.container.Container,
            torch.nn.modules.container.Sequential
        ]:
            modstr = torch_summarize(module)
        else:
            modstr = module.__repr__()
        modstr = _addindent(modstr, 2)
        params = sum([np.prod(p.size()) for p in module.parameters()])
        weights = tuple([tuple(p.size()) for p in module.parameters()])
        tmpstr += '  (' + key + '): ' + modstr 
        if show_weights:
            tmpstr += ', weights={}'.format(weights)
        if show_parameters:
            tmpstr +=  ', parameters={}'.format(params)
        tmpstr += '\n'
    tmpstr = tmpstr + ')'
    return tmpstr

#print(torch_summarize(model))
