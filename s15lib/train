
"""s15train.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1BcFF6UwNKLBoVEifKoY9FJANuTGYFDRM
"""

import s15utils
import torch
import torchvision
from tqdm.auto import tqdm
import matplotlib.pyplot as plt
from pathlib import Path

PATH= Path('/content/drive/My Drive/S15')

def saveimage(tensors, name, figsize=(30,30), *args, **kwargs):
  try:
    tensors = tensors.detach().cpu()
  except: 
    pass
  grid_tensor1= torchvision.utils.make_grid(tensors,*args, **kwargs)
  grid_image1= grid_tensor1.permute(1,2,0)
  plt.figure(figsize=figsize)
  plt.imshow(grid_image1)
  plt.xticks([])
  plt.yticks([])
  plt.savefig(name, bbox_inches = 'tight')
  plt.show()
  
def train( model,scheduler, criterion1,criterion2, device, train_loader, optimizer, epoch):
  model.train()
  pbar = tqdm(train_loader)

  for batch_idx, data in enumerate(pbar):
    data["bg_image"] = data["bg_image"].to(device)
    data["fg_bg_image"] = data["fg_bg_image"].to(device)
    data["ms_bg_image"] = data["ms_bg_image"].to(device)
    data["dp_image"] = data["dp_image"].to(device)
    optimizer.zero_grad()
    output=model(data)    
    #loss= criterion(output,data["ms_bg_image"])
    loss1 = criterion1(output[0],data["ms_bg_image"])
    loss2 = criterion2(output[1],data["dp_image"])
    loss = 2*loss1 + loss2
    pbar.set_description(desc= f'l1={round(loss1.item(),4)} l2={round(loss2.item(),4)}')
    loss.backward()
    optimizer.step()


    if batch_idx % 5000 == 0:
      print('Epoch : {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(epoch,batch_idx*len(data),len(train_loader.dataset), 
                                                                      100.*batch_idx/len(train_loader), loss.item()))
    if batch_idx % 5000 == 0:
      saveimage(output[0], f"/{epoch}_{batch_idx}_PMS_{loss1.item()}.jpg")
      saveimage(output[1], f"/{epoch}_{batch_idx}_PDP_{loss2.item()}.jpg")
      saveimage(data["ms_bg_image"], f"/{epoch}_{batch_idx}_MS_{loss.item()}.jpg")
      saveimage(data["dp_image"], f"/{epoch}_{batch_idx}_DP_{loss.item()}.jpg")
      saveimage(data["fg_bg_image"], f"/{epoch}_{batch_idx}_BG_{loss.item()}.jpg")

    if batch_idx % 50 == 0:
      torch.save(model.state_dict(), (PATH/f"{batch_idx}.pth"))
